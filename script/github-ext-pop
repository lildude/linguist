#!/usr/bin/env ruby
# frozen_string_literal: true

#/ Usage: GITHUB_TOKEN=<github_access_token> github-ext-pop [-h|--help|--download] [--list-repos] <extension>
#/
#/ Counts, and optionally downloads up to the first 1000 public files found on GitHub that have the supplied extension.
#/
#/ Requires the GITHUB_TOKEN environment variable to be set containing a GitHub personal access token.
#/

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'octokit', require: true
  gem 'rubyzip', require: 'zip'
end

def usage
  system "grep '^#/' '#{__FILE__}' | cut -c 4-"
end

if ARGV.include?('--help') || ARGV.include?('-h') || ENV['GITHUB_TOKEN'].nil? || ARGV[0].nil?
  usage
  exit 2
end

@download = !!ARGV.delete("--download")
@list_repos = !!ARGV.delete("--list-repos")
extension = ARGV[0].gsub(/^\./, '')
search_results = []

# Internal: Get the blob for the given search result
def blob_from_result(result)
  @client.blob(result.repository.full_name, result.sha)
end

# Internal: Adds a blob to the zip with the given path
def add(path, blob)
  zip.put_next_entry path
  zip.puts Base64.decode64(blob.content)
end

# Internal: The filename of the zip archive
def filename
  return @filename if @filename
  file = Tempfile.new(["linguist-corpus-", ".zip"]).tap do |f|
    @filename = f.path
    f.close
    f.unlink
  end
  puts "Saving corpus to #{@filename} ..."
  @filename
end

def summarise
  if @list_repos
    repos = "User/repos: \n"
    repos += "- #{@total_repos.to_a.sort.join("\n- ")}"
  end
  puts <<~SUMMARY

  Total files found: #{@total_count}
  Unique public user/repos: #{@total_repos.length}
  Unique owners: #{@total_users.length}
  #{repos}
  SUMMARY
end

# Internal: A zip file that can be appended to.
def zip
  @zip ||= Zip::OutputStream.open(filename)
end

def gather_results(extension, order = nil)
  sort = order.nil? ? nil : "indexed"
  STDERR.print "#{order.nil? ? "best match" : order}: "
  (1..10).each do |i|
    begin
      if @total_count > 0
        break if (i-1) * 100 > @total_count
      end
      search_results = @client.search_code("extension:#{extension} NOT nothack", :per_page => 100, :page => i, sort: sort, order: order)
      @total_count = search_results.total_count
      search_results.items.each do |result|
        @total_repos << result.repository.full_name
        @total_users << result.repository.owner.login
        if @download
          if blob = blob_from_result(result)
            add "#{result.repository.full_name}/#{result.path}", blob
          end
        end
      end
      STDERR.print "#{i} "
    rescue Octokit::Unauthorized => e
      STDERR.puts e.message
      abort
    rescue Octokit::TooManyRequests, Octokit::AbuseDetected
      sleep @client.rate_limit.resets_in
      retry
    rescue Octokit::NotFound
      STDERR.puts "No files with .#{extension} found."
      abort
    end
  end
end

@total_users = Set.new
@total_repos = Set.new
@total_count = 0
@client = Octokit::Client.new access_token: ENV['GITHUB_TOKEN']

gather_results(extension)

if @total_count > 1000
  gather_results(extension, "desc")
  gather_results(extension, "asc")
end

zip.close if @download

summarise
