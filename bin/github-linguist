#!/usr/bin/env ruby

$LOAD_PATH[0, 0] = File.join(File.dirname(__FILE__), '..', 'lib')

require 'linguist'
require 'rugged'
require 'json'
require 'optparse'

path = ARGV[0] || Dir.pwd

# special case if not given a directory
# but still given the --breakdown or --json options/
if path == "--breakdown"
  path = Dir.pwd
  breakdown = true
elsif path == "--json"
  path = Dir.pwd
  json_breakdown = true
end

ARGV.shift
breakdown = true if ARGV[0] == "--breakdown"
json_breakdown = true if ARGV[0] == "--json"

if File.directory?(path)
  rugged = Rugged::Repository.new(path)
  repo = Linguist::Repository.new(rugged, rugged.head.target_id)

  if !json_breakdown
    repo.languages.sort_by { |_, size| size }.reverse.each do |language, size|
      percentage = ((size / repo.size.to_f) * 100)
      percentage = sprintf '%.2f' % percentage
      puts "%10s %7s  %s" % [size.to_filesize, "#{percentage}%", language]
    end
  end
  if breakdown
    puts
    file_breakdown = repo.breakdown_by_file
    file_breakdown.each do |lang, files|
      puts "#{lang}:"
      files.sort_by{|ar| ar.last}.reverse.each do |file, size|
        puts "%10s  %s" % [size.to_filesize, file]
      end
      puts
    end
  elsif json_breakdown
    puts JSON.dump(repo.breakdown_by_file)
  end
elsif File.file?(path)
  blob = Linguist::FileBlob.new(path, Dir.pwd)

  type = if blob.text?
      'Text'
    elsif blob.image?
      'Image'
    else
      'Binary'
    end

  msg ||= case
    when blob.large?
      "- blob is too large to be shown"
    when ! [:programming, :markup].include?(blob.language.type)
      "- #{blob.language.type} type doesn't count towards statistics"
    when blob.generated?
      "- appears to be generated source code"
    when blob.vendored?
      "- appears to be a vendored file as the path matches one in lib/linguist/vendor.yml"
    when blob.documentation?
      "- appears to be documentation as the path matches one in lib/linguist/documentation.yml"
    end

  if json_breakdown
    puts JSON.generate( { blob.name =>  {
                                          :lines => blob.loc,
                                          :sloc => blob.sloc,
                                          :type => type,
                                          :mime_type => blob.mime_type,
                                          :language => blob.language
                                        }
                        } )
  else
    infos = {
      "type"          => type,
      "mime type"     => blob.mime_type,
      "language"      => blob.language,
      "language type" => blob.language.type,
      "in stats?"     => "#{blob.include_in_language_stats?} #{msg}"
    }

    warning = " WARNING: file is larger than 384kb so will not be included in search results" if blob.size > 393216
    puts "#{blob.name}: #{blob.size.to_filesize}, #{blob.loc} lines (#{blob.sloc} sloc)#{warning}\n\n"
    for k, v in infos do
      puts "%13s: %s" % [k, v]
    end
  end
else
  abort <<-HELP
  Linguist v#{Linguist::VERSION}
  Detect language type for a file, or, given a repository, determine language breakdown.

  Usage: linguist <path>
         linguist <path> [--breakdown|--json]
         linguist [--breakdown|--json]
  HELP
end
